#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <sys/ptrace.h>
#include <math.h>

#define CHALLENGE_NAME "Ranger"
#define FLAG "{{ flag_path }}"
#define KEY "\x1b\x9b\x4b\xa7\x37\xb5\x9a\x7b\xc9\x70\x67\x5f\x27\x95\x92\x7b" // "plutonium" hashed with modified md5 in bytes

#define LEFTROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))

/* Default constructor */
__attribute__((constructor)) void _stop(void) {
        //anti-debugging trick / bit of a troll
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0)
                exit(0);
        //sleep to hinder bruteforcing
        sleep(1);
}

/* Prints the theme MOTD */
void motd() {
        printf("\n");
        printf("                             ____\n");
        printf("                     __,-~~/~    `---.\n");
        printf("                   _/_,---(      ,    )\n");
        printf("               __ /        <    /   )  \\___\n");
        printf("- ------===;;;'====------------------===;;;===----- -%s-\n", CHALLENGE_NAME);
        printf("                  \\/  ~\"~\"~\"~\"~\"~\\~\"~)~\"/\n");
        printf("                  (_ (   \\  (     >    \\)\n");
        printf("                   \\_( _ <         >_>'\n");
        printf("                      ~ `-i' ::>|--\"\n");
        printf("                          I;|.|.|\n");
        printf("                         <|i::|i|`.\n");
        printf("                        (` ^'\"`-' \")\n");
        printf("\n");
}

/* Implement modified md5 algorithm */
uint8_t *hash(const char *m) {
        // From https://en.wikipedia.org/wiki/MD5 psuedo-code

        //s per-round shift amounts
        uint32_t s[] = { 7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
                         5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
                         4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
                         6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21 };

        //calc K table
        uint32_t K[64] = {0};
        for(int i = 0; i < 64; i++) {
            K[i] = floor(pow(2, 32) * fabs(sin(i + 1)));
        }

        //initial state
        uint32_t a0 = 0x67452301; //A
        uint32_t b0 = 0xefcdab89; //B
        uint32_t c0 = 0x98badcfe; //C
        uint32_t d0 = 0x10325476; //D

        //get original msg len in bytes
        size_t org_len = strlen(m);

        //calc msg len in bits + 1
        size_t len = org_len * 8 + 1; //get length in bits + 1

        //calc len for padding
        for(len; len % 512 != 448; len++);

        //convert len back to bytes
        len /= 8;

        //allocate some heap space for msg with padding
        uint8_t *msg = NULL;
        msg = calloc(len + sizeof(uint32_t), 1);
        if(!msg) return NULL;

        //copy string and append 1 bit
        memcpy(msg, m, org_len);
        msg[org_len] = 0x80;

        //append len of original message in bits
        uint32_t blen = org_len * 8;
        memcpy(msg + len, &blen, sizeof(blen));

        //process in 64 byte chunks
        for(uint32_t offset = 0; offset < len; offset += 64) {
                //break into 4 byte words
                uint32_t *M = (uint32_t *)(msg + offset);

                //init hash value for this chunk + plus add our sneaky modification
                uint32_t A = a0 + 'H';
                uint32_t B = b0 + 'A';
                uint32_t C = c0 + 'H';
                uint32_t D = d0 + 'N';

                //main hashing loop
                for(uint32_t i = 0; i < 64; i++) {
                        uint32_t F, g;
                        if(i < 16) {
                                F = (B & C) | ((~B) & D);
                                g = i;
                        } else if(i < 32) {
                                F = (D & B) | ((~D) & C);
                                g = (5 * i + 1) % 16;
                        } else if(i < 48) {
                                F = B ^ C ^ D;
                                g = (3 * i + 5) % 16;
                        } else {
                                F = C ^ (B | (~D));
                                g = (7 * i) % 16;
                        }
                        F = F + A + K[i] + M[g];
                        A = D;
                        D = C;
                        C = B;
                        B = B + LEFTROTATE(F, s[i]);
                }
                //add chunk hash to result
                a0 += A;
                b0 += B;
                c0 += C;
                d0 += D;
        }
        free(msg);

        //return ptr to complete hash
        static uint8_t hash[16] = {0};
        memcpy(hash, &a0, 4);
        memcpy(hash + 4, &b0, 4);
        memcpy(hash + 8, &c0, 4);
        memcpy(hash + 12, &d0, 4);
        return hash;
}

/* Checks the user input against the stored key */
bool check_key(const char *k) {
        uint8_t *h = NULL;
        h = hash(k);
        if(h) {
                if(memcmp(h, KEY, 16) == 0)
                        return true;
        }
        return false;
}
        
/* Read and print the flag file */
void read_flag() {
        int c;
        FILE *file;
        file = fopen(FLAG, "r");
        if (file) {
                while ((c = getc(file)) != EOF)
                        putchar(c);
                fclose(file);
        } else {
                printf("Bummer, error opening flag file!\n");
        }
}

/* MAIN */
int main(int argc, char *argv[]) {
        motd();

        if(argc < 2) {
                printf("Usage: %s <key>\n", argv[0]);
                return 0;
        }

        if(check_key(argv[1])) {
                read_flag();
        } else {
                printf("Invalid key!\n");
        }
        return 0;
}
